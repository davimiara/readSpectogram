The canonical WAVE format starts with the RIFF header:

0         4   ChunkID          Contains the letters "RIFF" in ASCII form
                               (0x52494646 big-endian form).
4         4   ChunkSize        36 + SubChunk2Size, or more precisely:
                               4 + (8 + SubChunk1Size) + (8 + SubChunk2Size)
                               This is the size of the rest of the chunk 
                               following this number.  This is the size of the 
                               entire file in bytes minus 8 bytes for the
                               two fields not included in this count:
                               ChunkID and ChunkSize.
8         4   Format           Contains the letters "WAVE"
                               (0x57415645 big-endian form).

The "WAVE" format consists of two subchunks: "fmt " and "data":
The "fmt " subchunk describes the sound data's format:

12        4   Subchunk1ID      Contains the letters "fmt "
                               (0x666d7420 big-endian form).
16        4   Subchunk1Size    16 for PCM.  This is the size of the
                               rest of the Subchunk which follows this number.
20        2   AudioFormat      PCM = 1 (i.e. Linear quantization)
                               Values other than 1 indicate some 
                               form of compression.
22        2   NumChannels      Mono = 1, Stereo = 2, etc.
24        4   SampleRate       8000, 44100, etc.
28        4   ByteRate         == SampleRate * NumChannels * BitsPerSample/8
32        2   BlockAlign       == NumChannels * BitsPerSample/8
                               The number of bytes for one sample including
                               all channels. I wonder what happens when
                               this number isn't an integer?
34        2   BitsPerSample    8 bits = 8, 16 bits = 16, etc.
          2   ExtraParamSize   if PCM, then doesn't exist
          X   ExtraParams      space for extra parameters

The "data" subchunk contains the size of the data and the actual sound:

36        4   Subchunk2ID      Contains the letters "data"
                               (0x64617461 big-endian form).
40        4   Subchunk2Size    == NumSamples * NumChannels * BitsPerSample/8
                               This is the number of bytes in the data.
                               You can also think of this as the size
                               of the read of the subchunk following this 
                               number.
44        *   Data             The actual sound data.


As an example, here are the opening 72 bytes of a WAVE file with bytes shown as hexadecimal numbers:

52 49 46 46 24 08 00 00 57 41 56 45 66 6d 74 20 10 00 00 00 01 00 02 00 
22 56 00 00 88 58 01 00 04 00 10 00 64 61 74 61 00 08 00 00 00 00 00 00 
24 17 1e f3 3c 13 3c 14 16 f9 18 f9 34 e7 23 a6 3c f2 24 f2 11 ce 1a 0d



32 bit value saying how big the format chunk is (in bytes) 
16 bit value identifying the format tag (identifies way data is stored, 1 here means no compression (PCM), if otherwise it's some other type of format) 
16 bit value describing # of channels (1 means mono, 2 means stereo) 
32 bit value describing sample rate or number of samples per second (like 44100, 22050, or 11025) 
32 bit value describing average # of bytes per second (found by: samplerate*channels*(bitspersample/8)) you probably won't need or use this value 
16 bit value describing block alignment (found by: (bitspersample/8)*channels) you probably won't need or use this value either 
16 bit value describing bits per sample (8bit or 16bit sound) 

Ok now that we know what those next 16 bytes describing the format are, let's add some source code to reflect this: 

FILE *fp; 

fp = fopen("sound.wav","rb); 
if (fp) 
{ 
    BYTE id[4]; //four bytes to hold 'RIFF' 
    DWORD size; //32 bit value to hold file size 
   //our 16 bit format info values 
    short format_tag, channels, block_align, bits_per_sample; 
    DWORD format_length, sample_rate, avg_bytes_sec; //our 32 bit format info values 

    fread(id, sizeof(BYTE), 4, fp); //read in first four bytes 
    if (!strcmp(id, "RIFF")) 
    { //we had 'RIFF' let's continue 
        fread(size, sizeof(DWORD), 1, fp); //read in 32bit size value 
        fread(id, sizeof(BYTE), 4, fp); //read in 4 byte string now 
        if (!strcmp(id,"WAVE")) 
        { //this is probably a wave file since it contained "WAVE" 
            fread(id, sizeof(BYTE), 4, fp); //read in 4 bytes "fmt "; 
            fread(format_length, sizeof(DWORD),1,fp); 
            fread(format_tag, sizeof(short), 1, fp); 
            fread(channels, sizeof(short),1,fp); 
            fread(sample_rate, sizeof(DWORD), 1, fp); 
            fread(avg_bytes_sec, sizeof(short), 1, fp); 
            fread(block_align, sizeof(short), 1, fp); 
            fread(bits_per_sample, sizeof(short), 1, fp); 
        } 
        else 
            printf("Error: RIFF file but not a wave file\n"); 
    } 
    else 
        printf("Error: not a RIFF file\n"); 
} 


http://www.cpp-home.com/tutorials/333_1.htm
